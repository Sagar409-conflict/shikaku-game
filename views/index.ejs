<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- <title>Shikaku Puzzle Game</title> -->
    <script src="/socket.io/socket.io.js"></script>
    <style>
      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-family: Arial, sans-serif;
        background-color: #f0f0f0;
        margin: 0;
        padding: 20px;
      }

      h1 {
        margin-bottom: 20px;
      }

      #board {
        display: grid;
        grid-template-columns: repeat(auto-fill, 50px);
        gap: 1px;
        background-color: #333;
        padding: 1px;
      }

      .cell {
        width: 50px;
        height: 50px;
        background-color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        cursor: pointer;
        border: 1px solid #ddd;
        transition: background-color 0.3s;
      }

      .cell:hover {
        background-color: #f0f0f0;
      }

      .cell.active {
        background-color: #ffeb3b;
      }
    </style>
  </head>

  <body>
    <!-- <h1>Shikaku Puzzle Game</h1> -->
    <div id="board"></div>
    <script>
      const socket = io();

      const renderBoard = (boardState) => {
        const board = document.getElementById("board");
        board.innerHTML = "";
        board.style.gridTemplateColumns = `repeat(${boardState[0].length}, 50px)`;
        let isDragging = false;
        let startCell = null;

        boardState.forEach((row, rowIndex) => {
          row.forEach((cell, colIndex) => {
            const cellDiv = document.createElement("div");
            cellDiv.classList.add("cell");
            cellDiv.dataset.row = rowIndex;
            cellDiv.dataset.col = colIndex;
            // cellDiv.textContent = cell;
            // cellDiv.addEventListener("click", handleCellClick);
            cellDiv.addEventListener("mousedown", (e) => {
              isDragging = true;
              startCell = e.target;
              e.target.classList.add("active");
            });

            cellDiv.addEventListener("mousemove", (e) => {
              if (isDragging) {
                e.target.classList.add("active");
              }
            });

            cellDiv.addEventListener("mouseup", () => {
              isDragging = false;
              startCell = null;
            });

            cellDiv.addEventListener("mouseleave", (e) => {
              if (isDragging) {
                e.target.classList.add("active");
              }
            });
            const numbers = [1, 2, 3, 4];
            if (Math.random() < 0.3) {
              const randomNumber = numbers[Math.floor(Math.random() * numbers.length)];
              cellDiv.textContent = randomNumber;
            }
            board.appendChild(cellDiv);
          });
        });
      };

      // // Generate random numbers between 1 and 4 and place them on the board
      // function generateRandomNumbers() {
      //   const numCells = rows * cols;
      //   const numbers = [1, 2, 3, 4];

      //   cells.forEach((cell) => {
      //     if (Math.random() < 0.1) {
      //       // 10% chance to place a number in each cell
      //       const randomNumber = numbers[Math.floor(Math.random() * numbers.length)];
      //       cell.textContent = randomNumber;
      //     }
      //   });
      // }

      const handleCellClick = (event) => {
        const cell = event.target;
        const row = cell.dataset.row;
        const col = cell.dataset.col;
        console.log(`Cell clicked: Row ${row}, Col ${col}`);
        cell.classList.toggle("active");
      };

      socket.emit("initBoard", { width: 5, height: 5 }, (response) => {
        console.log("Board initialized:", response);
        renderBoard(response.boardState);
      });
    </script>
  </body>
</html>
